services:
  db:
    image: postgres:15-alpine
    container_name: ohana-db-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-ohana}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password}
      POSTGRES_DB: ${POSTGRES_DB:-ohana_booking_dev}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ohana}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ohana-redis-dev
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_dev:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: api-dev
    container_name: ohana-api-dev
    restart: unless-stopped
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      NODE_ENV: development
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      PORT: ${API_PORT:-3000}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
    volumes:
      - .:/app
      - /app/node_modules
      - /app/apps/api/node_modules
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  web:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: web-dev
    container_name: ohana-web-dev
    restart: unless-stopped
    ports:
      - "${VITE_PORT:-5173}:5173"
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
    volumes:
      - .:/app
      - /app/node_modules
      - /app/apps/web/node_modules
    depends_on:
      - api

volumes:
  postgres_data_dev:
  redis_data_dev:

networks:
  default:
    name: ohana-network-dev